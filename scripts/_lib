#!/bin/bash -uex
#
set -euo pipefail

if [ ! -z ${GITHUB_CREDENTIAL} ]; then
  echo "user = \"${GITHUB_CREDENTIAL}\"" > $HOME/.curlrc
fi

log() {
  echo "[installer] $*" >&2
}

die() {
  log "$@"
  exit 1
}

get_latest() {
  local _repo=${1}
  local _latest_version=$(
    curl -sfL "https://api.github.com/repos/${_repo}/releases/latest" |\
    grep tag_name |\
    cut -d '"' -f 4
  )
  echo ${_latest_version}
}

get_release_url() {
  local _repo=${1}
  local _version=${2}
  local _release_url=""
  if [ "${_version}" == "latest" ]; then
    _release_url="https://api.github.com/repos/${_repo}/releases/tags/$(get_latest ${_repo})"
  else
    _release_url="https://api.github.com/repos/${_repo}/releases/tags/${_version}"
  fi
  echo ${_release_url}
}

get_kernel() {
  local _kernel=$(uname -s | tr "[:upper:]" "[:lower:]")
  echo ${_kernel}
}

get_machine() {
  _arch="$(uname -m)"
  case ${_arch} in
    x86_64)
      local _machine=amd64
      ;;
    i686 | i386)
      local _machine=386
      ;;
    aarch64 | arm64)
      local _machine=arm64
      ;;
    *)
      log "Machine ${_arch} not supported by the installer.\n"
      ;;
  esac
  echo ${_machine}
}

get_release_archive_url() {
  local _repo=${1}
  local _version=${2}
  local _pattern=${3}
  local _release_url=$(get_release_url ${_repo} ${_version})
  local _download_url=''
  if [ ${_pattern} == 'tarball' ]; then
    _download_url=$(
      curl -sfL ${_release_url} \
      | grep tarball \
      | cut -d '"' -f 4
    )
  else
    _download_url=$(
      curl -sfL ${_release_url} \
      | grep browser_download_url \
      | cut -d '"' -f 4 \
      | grep "${_pattern}"
    )
  fi
  echo ${_download_url}
}

tc() {
    sed 's/.*/\L&/; s/[a-z]*/\u&/g' <<<"$1"    
}